{"version":3,"sources":["../../src/client/context.tsx"],"names":["client"],"mappings":";;;;;AAGA,OAAO,WAAW;AAClB,SAAS,eAAe,YAAY,WAAW,eAAe;AAEvD,IAAM,mBAAmB,cAAgC,IAAI;AACpE,iBAAiB,cAAc;AACxB,IAAM,oBAAoB,iBAAiB;AAQ3C,SAAS,kBACd,GAQA;AACA,MAAM,SAAS,QAAQ,MAAM;AAC3B,QAAI,OAAO,SAAW,IAAa,QAAO;AAC1C,QAAMA,UAAS,IAAI,UAAU,EAAE,KAAK,EAAE,SAAS;AAC/C,WAAI,EAAE,eAAYA,QAAO,aAAa,EAAE,aACjCA;AAAA,EACT,GAAG,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,CAAC;AAErC,mBAAU,MAAM;AACd,QAAI,QAAQ,eAAe,UAAU;AACrC,aAAO,MAAM,OAAO,MAAM;AAAA,EAC5B,GAAG,CAAC,MAAM,CAAC,GAGT,oCAAC,iBAAiB,UAAjB,EAA0B,OAAO,UAC/B,EAAE,QACL;AAEJ;AA3BgB;AAiCT,SAAS,eAAe;AAC7B,MAAM,UAAU,WAAW,gBAAgB;AAC3C,MAAI,YAAY;AACd,UAAM,IAAI,MAAM,sDAAsD;AACxE,SAAO;AACT;AALgB","sourcesContent":["'use client';\n\n// biome-ignore lint/style/useImportType: <explanation>\nimport React from 'react';\nimport { createContext, useContext, useEffect, useMemo } from 'react';\n\nexport const WebSocketContext = createContext<WebSocket | null>(null);\nWebSocketContext.displayName = 'WebSocketContext';\nexport const WebSocketConsumer = WebSocketContext.Consumer;\n\n/**\n * Provides a WebSocket client to its children via context,\n * allowing for easy access to the WebSocket from anywhere in the app.\n * @param props WebSocket parameters and children.\n * @returns JSX Element\n */\nexport function WebSocketProvider(\n  p: React.PropsWithChildren<{\n    /** The URL for the WebSocket to connect to. */\n    url: string;\n    /** The subprotocols to use. */\n    protocols?: string[] | string;\n    /** The binary type to use. */\n    binaryType?: BinaryType;\n  }>,\n) {\n  const client = useMemo(() => {\n    if (typeof window === 'undefined') return null;\n    const client = new WebSocket(p.url, p.protocols);\n    if (p.binaryType) client.binaryType = p.binaryType;\n    return client;\n  }, [p.url, p.protocols, p.binaryType]);\n\n  useEffect(() => {\n    if (client?.readyState !== WebSocket.OPEN) return;\n    return () => client.close();\n  }, [client]);\n\n  return (\n    <WebSocketContext.Provider value={client}>\n      {p.children}\n    </WebSocketContext.Provider>\n  );\n}\n\n/**\n * Access the websocket from anywhere in the app, so long as it's wrapped in a WebSocketProvider.\n * @returns WebSocket client when connected, null when disconnected.\n */\nexport function useWebSocket() {\n  const context = useContext(WebSocketContext);\n  if (context === undefined)\n    throw new Error('useWebSocket must be used within a WebSocketProvider');\n  return context;\n}\n"]}
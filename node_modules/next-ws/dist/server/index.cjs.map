{"version":3,"sources":["../../src/server/setup.ts","../../src/server/helpers/persistent.ts","../../src/server/helpers/route.ts","../../src/server/index.ts"],"names":["logger"],"mappings":"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","sourcesContent":["import * as logger from 'next/dist/build/output/log';\nimport type NextNodeServer from 'next/dist/server/next-server';\nimport { WebSocketServer } from 'ws';\nimport { useHttpServer, useWebSocketServer } from './helpers/persistent';\nimport { importRouteModule, resolvePathToRoute } from './helpers/route';\n\nexport function setupWebSocketServer(nextServer: NextNodeServer) {\n  process.env.NEXT_WS_MAIN_PROCESS = String(1);\n\n  process.env.NEXT_WS_SKIP_ENVIRONMENT_CHECK = String(1);\n  // @ts-expect-error - serverOptions is protected\n  const httpServer = useHttpServer(nextServer.serverOptions?.httpServer);\n  const wsServer = useWebSocketServer(new WebSocketServer({ noServer: true }));\n  // biome-ignore lint/performance/noDelete: <explanation>\n  delete process.env.NEXT_WS_SKIP_ENVIRONMENT_CHECK;\n\n  if (!httpServer)\n    return logger.error('[next-ws] was not able to find the HTTP server');\n  if (!wsServer)\n    return logger.error('[next-ws] was not able to find the WebSocket server');\n\n  logger.ready('[next-ws] has started the WebSocket server');\n\n  httpServer.on('upgrade', async (request, socket, head) => {\n    const url = new URL(request.url ?? '', 'ws://next');\n    const pathname = url.pathname;\n    if (pathname.startsWith('/_next')) return;\n\n    const routeInfo = resolvePathToRoute(nextServer, pathname);\n    if (!routeInfo) {\n      logger.error(`[next-ws] could not find module for page ${pathname}`);\n      return socket.destroy();\n    }\n\n    const routeModule = await importRouteModule(nextServer, routeInfo.filePath);\n    if (!routeModule) {\n      logger.error(`[next-ws] could not find module for page ${pathname}`);\n      return socket.destroy();\n    }\n\n    const socketHandler = routeModule?.routeModule?.userland?.SOCKET;\n    if (!socketHandler || typeof socketHandler !== 'function') {\n      logger.error(`[next-ws] ${pathname} does not export a SOCKET handler`);\n      return socket.destroy();\n    }\n\n    return wsServer.handleUpgrade(request, socket, head, async (c, r) => {\n      const routeContext = { params: routeInfo.routeParams };\n      const handleClose = await socketHandler(c, r, wsServer, routeContext);\n      if (typeof handleClose === 'function')\n        c.once('close', () => handleClose());\n    });\n  });\n}\n\n// Next WS versions below 0.2.0 used a different method of setup\n// This remains for backwards compatibility, but may be removed in a future version\nexport function hookNextNodeServer(this: NextNodeServer) {\n  setupWebSocketServer(this);\n}\n","import * as logger from 'next/dist/build/output/log';\n\n/**\n * Get the environment metadata.\n * @returns The environment metadata.\n */\nfunction getEnvironmentMeta() {\n  const isCustomServer = !process.title.startsWith('next-');\n  const isMainProcess = process.env.NEXT_WS_MAIN_PROCESS === '1';\n  const isDevelopment = process.env.NODE_ENV === 'development';\n  return { isCustomServer, isMainProcess, isDevelopment };\n}\n\nfunction mainProcessOnly(fnName: string) {\n  if (process.env.NEXT_WS_SKIP_ENVIRONMENT_CHECK === '1') return;\n\n  const meta = getEnvironmentMeta();\n  if (!meta.isMainProcess) {\n    throw new Error(\n      `[next-ws] Attempt to invoke '${fnName}' outside the main process.\nYou may be attempting to interact with the WebSocket server outside of a SOCKET handler. This will fail in production, as Next.js employs a worker process for routing, which do not have access to the WebSocket server on the main process.\nYou can resolve this by using a custom server.`,\n    );\n  } else if (!meta.isCustomServer) {\n    logger.warnOnce(\n      `[next-ws] Caution: The function '${fnName}' was invoked without a custom server.\nThis could lead to unintended behaviour, especially if you're attempting to interact with the WebSocket server outside of a SOCKET handler.\nPlease note, while such configurations might function during development, they will fail in production. This is because Next.js employs a worker process for routing in production, which do not have access to the WebSocket server on the main process.\nYou can resolve this by using a custom server.`,\n    );\n  }\n}\n\n// ========== HTTP Server ==========\n\nimport type { Server as HttpServer } from 'node:http';\nexport const NextWsHttpServer = Symbol.for('NextWs_HttpServer');\n\n/**\n * Set the HTTP server that the WebSocket server should listen on, must be called before the WebSocket server is created.\n * @param server The HTTP server.\n */\nexport function setHttpServer(server: HttpServer) {\n  Reflect.set(globalThis, NextWsHttpServer, server);\n}\n\n/**\n * Get the HTTP server that the WebSocket server is listening on.\n * @remark If you want to access the HTTP server outside of a SOCKET handler, you must be using a custom server.\n * @returns The HTTP server.\n * @throws If attempting to access the HTTP server outside of the main process.\n */\nexport function getHttpServer() {\n  mainProcessOnly('getHttpServer');\n  return Reflect.get(globalThis, NextWsHttpServer) as HttpServer;\n}\n\nexport function useHttpServer(server?: HttpServer) {\n  const existing = getHttpServer();\n  if (existing) return existing;\n  if (server) setHttpServer(server);\n  return server;\n}\n\n// ========== WebSocket Server ==========\n\nimport type { WebSocketServer } from 'ws';\nexport const NextWsWebSocketServer = Symbol.for('NextWs_WebSocketServer');\n\n/**\n * Set the WebSocket server that the WebSocket server should listen on, must be called before the WebSocket server is created.\n * @param wsServer The WebSocket server.\n */\nexport function setWebSocketServer(wsServer: WebSocketServer) {\n  Reflect.set(globalThis, NextWsWebSocketServer, wsServer);\n}\n\n/**\n * Get the WebSocket server that the WebSocket server is listening on.\n * @remark If you want to access the WebSocket server outside of a SOCKET handler, you must be using a custom server.\n * @returns The WebSocket server.\n * @throws If attempting to access the WebSocket server outside of the main process.\n */\nexport function getWebSocketServer() {\n  mainProcessOnly('getWebSocketServer');\n  return Reflect.get(globalThis, NextWsWebSocketServer) as WebSocketServer;\n}\n\nexport function useWebSocketServer(wsServer?: WebSocketServer) {\n  const existing = getWebSocketServer();\n  if (existing) return existing;\n  if (wsServer) setWebSocketServer(wsServer);\n  return wsServer;\n}\n","import * as logger from 'next/dist/build/output/log';\nimport type NextNodeServer from 'next/dist/server/next-server';\nimport type { SocketHandler } from './socket';\n\nfunction createRouteRegex(routePattern: string) {\n  const escapedPattern = routePattern.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n  const paramRegex = escapedPattern\n    .replace(/\\\\\\[([a-zA-Z0-9_]+)\\\\\\]/g, '(?<$1>[^/]+)') // Match [param]\n    .replace(/\\\\\\[(?:\\\\\\.){3}([a-zA-Z0-9_]+)\\\\\\]/g, '(?<rest_$1>.+)'); // Match [...param]\n  return new RegExp(`^${paramRegex}$`);\n}\n\nfunction getRouteParams(routePattern: string, routePath: string) {\n  const routeRegex = createRouteRegex(routePattern);\n  const match = routePath.match(routeRegex);\n  if (!match) return null;\n  if (!match.groups) return {};\n\n  const params: Record<string, string | string[]> = {};\n  for (let [k, v] of Object.entries(match.groups)) {\n    if (k.startsWith('rest_')) (k = k.slice(5)), (v = v.split('/') as never);\n    Reflect.set(params, k, v);\n  }\n  return params;\n}\n\n/**\n * Resolve a request path to a route file path and route parameters.\n * @param nextServer The NextNodeServer instance.\n * @param requestPath The request path to resolve for.\n * @returns The resolved file path and route parameters, or null if the route could not be resolved.\n */\nexport function resolvePathToRoute(\n  nextServer: NextNodeServer,\n  requestPath: string,\n) {\n  const routes = {\n    // @ts-expect-error - appPathRoutes is protected\n    ...nextServer.appPathRoutes,\n    // @ts-expect-error - getAppPathRoutes is protected\n    ...nextServer.getAppPathRoutes(),\n  };\n\n  for (const [routePath, [filePath]] of Object.entries(routes)) {\n    const routeParams = getRouteParams(routePath, requestPath);\n    if (routeParams) return { filePath: filePath!, routeParams };\n  }\n\n  return null;\n}\n\n/**\n * Import the route module for a route.\n * @param nextServer The NextNodeServer instance.\n * @param filePath The file path of the route.\n * @returns\n */\nexport async function importRouteModule(\n  nextServer: NextNodeServer,\n  filePath: string,\n) {\n  try {\n    // In Next.js 14, hotReloader was removed and ensurePage was moved to NextNodeServer\n    if ('hotReloader' in nextServer) {\n      // @ts-expect-error - hotReloader only exists in Next.js 13\n      await nextServer.hotReloader?.ensurePage({\n        page: filePath,\n        clientOnly: false,\n      });\n    } else if ('ensurePage' in nextServer) {\n      // ensurePage throws an error in production, so we need to catch it\n      // @ts-expect-error - ensurePage is protected\n      await nextServer.ensurePage({ page: filePath, clientOnly: false });\n    } else {\n      // Future-proofing\n      logger.warnOnce(\n        '[next-ws] unable to ensure page, you may need to open the route in your browser first so Next.js compiles it',\n      );\n    }\n  } catch {}\n\n  // @ts-expect-error - getPageModule is protected\n  const buildPagePath = nextServer.getPagePath(filePath);\n  return require(buildPagePath) as RouteModule;\n}\n\nexport interface RouteModule {\n  routeModule?: {\n    userland?: {\n      SOCKET?: SocketHandler;\n    };\n  };\n}\n","export * from './setup';\nexport {\n  setHttpServer,\n  getHttpServer,\n  setWebSocketServer,\n  getWebSocketServer,\n} from './helpers/persistent';\n\n/**\n * @deprecated\n */\nexport function verifyPatch() {\n  throw new Error(\n    \"The 'verifyPatch' function has been deprecated in favour of the `npx next-ws-cli@latest verify` command.\",\n  );\n}\n"]}